<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>🌙Nightyping</title>
  
  <subtitle>技术，生活与美好</subtitle>
  <link href="https://www.iuoyt.com/atom.xml" rel="self"/>
  
  <link href="https://www.iuoyt.com/"/>
  <updated>2023-09-09T12:15:09.784Z</updated>
  <id>https://www.iuoyt.com/</id>
  
  <author>
    <name>Royster</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LC 1. 两数之和</title>
    <link href="https://www.iuoyt.com/posts/d98ef1d2.html"/>
    <id>https://www.iuoyt.com/posts/d98ef1d2.html</id>
    <published>2023-08-20T06:12:26.000Z</published>
    <updated>2023-09-09T12:15:09.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><ul><li>序号：1</li><li>题目：两数之和</li><li>难度：简单</li><li>标签：数组、哈希表</li></ul><details class="folding-tag" open><summary> 题目描述 </summary>              <div class='content'>              <blockquote><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[2,7,11,15]</span>, target = 9</span><br><span class="line">输出：<span class="comment">[0,1]</span></span><br><span class="line">解释：因为 nums<span class="comment">[0]</span> + nums<span class="comment">[1]</span> == 9 ，返回 <span class="comment">[0, 1]</span> 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[3,2,4]</span>, target = 6</span><br><span class="line">输出：<span class="comment">[1,2]</span></span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[3,3]</span>, target = 6</span><br><span class="line">输出：<span class="comment">[0,1]</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>$2 &lt;= nums.length &lt;= 10^4$</li><li>$-10^9 &lt;= nums[i] &lt;= 10^9$</li><li>$-10^9 &lt;= target &lt;= 10^9$</li><li><strong>只会存在一个有效答案</strong></li></ul><p><strong>进阶：</strong> 你可以想出一个时间复杂度小于 <code>O(n2)</code> 的算法吗？</p></blockquote>              </div>            </details><hr><h2 id="题解-方法1（枚举法）">题解-方法1（枚举法）</h2><h3 id="思路">思路</h3><ul><li>暴力枚举</li><li>遍历数组中所有的数字，查找符合求和满足条件的值。内层循环查找的开始位置可以是外层循环位置的后一位，因为前方的值已经匹配过，无需遍历。</li></ul><h3 id="代码">代码</h3><div class="tabs" id="代码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#代码-1">Java</button></li><li class="tab"><button type="button" data-href="#代码-2">C++</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="代码-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; len; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]+nums[j] == target)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="代码-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;i, j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="复杂度分析">复杂度分析</h3><ul><li>时间复杂度：$O(n^2)$</li><li>空间复杂度：$O(1)$</li></ul><h2 id="题解-方法2（哈希表）">题解-方法2（哈希表）</h2><h3 id="思路-2">思路</h3><ul><li>哈希表</li><li>通过哈希表可以将内层时间复杂度O(n)降为O(1)。在哈希表中询问是否存在<code>target - nums[i]</code>的值，不存在则将当前值存入哈希表。</li></ul><h3 id="代码-2">代码</h3><div class="tabs" id="代码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#代码-1">Java</button></li><li class="tab"><button type="button" data-href="#代码-2">C++</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="代码-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; hashTable = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hashTable.containsKey(target - nums[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;hashTable.get(target - nums[i]), i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            hashTable.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="代码-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hashTable;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hashTable.<span class="built_in">find</span>(target - nums[i]) != hashTable.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;hashTable[target - nums[i]], i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            hashTable[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="复杂度分析-2">复杂度分析</h3><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(n)$</li></ul>]]></content>
    
    
    <summary type="html">LeetCode：1. 两数之和</summary>
    
    
    
    <category term="LeetCode" scheme="https://www.iuoyt.com/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://www.iuoyt.com/tags/LeetCode/"/>
    
    <category term="数组" scheme="https://www.iuoyt.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="哈希表" scheme="https://www.iuoyt.com/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Git分支管理</title>
    <link href="https://www.iuoyt.com/posts/935337f5.html"/>
    <id>https://www.iuoyt.com/posts/935337f5.html</id>
    <published>2023-08-04T04:24:21.000Z</published>
    <updated>2023-09-09T12:15:09.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分支创建与切换">分支创建与切换</h2><ul><li><p>创建一个分支可以使用<code>git branch</code>命令，比如可以使用这个语句创建一个testing分支，这会在当前所在的提交对象上创建一个指针：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch testing</span><br></pre></td></tr></table></figure></li><li><p>创建完testing分支后，情况如下：</p><p><img src="https://git-scm.com/book/en/v2/images/head-to-master.png" alt="HEAD 指向当前所在的分支。"></p></li><li><p>使用<code>git branch</code>创建好分支后并不会自动切换到新的分支，切换到一个分支，可以使用<code>git checkout</code>命令，比如这条命令将会切换HEAD指针到testing分支：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout testing</span><br></pre></td></tr></table></figure></li><li><p>HEAD指针指向了testing分支</p><p><img src="https://git-scm.com/book/en/v2/images/head-to-testing.png" alt="HEAD 指向当前所在的分支。"></p></li><li><p>当然，Git也可以在创建分支的同时切换到当前分支：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="分支提交">分支提交</h2><ul><li><p>HEAD当前指向testing分支，那么现在更新一些内容然后进行提交：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim test.rb</span><br><span class="line">git commit -a -m &#x27;update testing&#x27;</span><br></pre></td></tr></table></figure></li><li><p>提交完成后，分支情况就变成现在这样：</p><p><img src="https://git-scm.com/book/en/v2/images/advance-testing.png" alt="HEAD 分支随着提交操作自动向前移动。"></p></li><li><p>如果现在再将HEAD移动回master分支：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p><img src="https://git-scm.com/book/en/v2/images/checkout-master.png" alt="检出时 HEAD 随之移动。"></p><p>这个时候，你的工作目录和你在开始修改tetsing分支之前一模一样。当你切换分支的时候，Git 会重置你的工作目录，使其看起来像回到了你在那个分支上最后一次提交的样子。 Git 会自动添加、删除、修改文件以确保此时你的工作目录和这个分支最后一次提交时的样子一模一样。</p></li><li><p>现在在master分支下再进行一次修改并提交：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim test.rb</span><br><span class="line">git commit -a -m &#x27;update master&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://git-scm.com/book/en/v2/images/advance-master.png" alt="项目分叉历史。"></p></li></ul><h2 id="项目分叉历史">项目分叉历史</h2><ul><li><p>查看当前项目的分叉历史，可以使用<code>git log</code>命令进行查看，它会输出提交历史、各个分支的指向以及项目的分支分叉情况：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --oneline --decorate --graph --all</span></span><br><span class="line">* c2b9e (HEAD, master) update master</span><br><span class="line">| * 87ab2 (testing) update testing</span><br><span class="line">|/</span><br><span class="line">* f30ab add feature #32 - ability to add new formats to the</span><br><span class="line">* 34ac2 fixed bug #1328 - stack overflow under certain conditions</span><br><span class="line">* 98ca9 initial commit of my project</span><br></pre></td></tr></table></figure></li><li><p>Git的分支实质上仅是包含所指对象校验和（长度为40的SHA-1值字符串）的文件，所以创建和销毁分支都可以做到非常的高效。</p></li></ul><h2 id="删除分支">删除分支</h2><ul><li><p>使用带有<code>-d</code>的<code>git branch</code>命令可以删除分支：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d testing</span><br></pre></td></tr></table></figure></li></ul><h2 id="合并分支">合并分支</h2><ul><li><p>假设当前已有master分支如下：</p><p><img src="https://git-scm.com/book/en/v2/images/basic-branching-1.png" alt="一个简单的提交历史。"></p></li><li><p>现在，需要解决追踪系统的#53问题，新建了一个iss53分支：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch iss53</span><br><span class="line">git checkout iss53</span><br></pre></td></tr></table></figure><p><img src="https://git-scm.com/book/en/v2/images/basic-branching-2.png" alt="创建一个新分支指针。"></p></li><li><p>现在在iss53分支进行了一些更改：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim index.html</span><br><span class="line">git commit -a -m &#x27;added a new footer [issue 53]&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://git-scm.com/book/en/v2/images/basic-branching-3.png" alt=" 分支随着工作的进展向前推进。"></p></li></ul><h3 id="快进式（fast-forward）合并">快进式（fast-forward）合并</h3><ul><li><p>现在需要对主分支进行一次紧急修复，切换到master分支并进行一次热修复：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git checkout -b hotfix</span><br><span class="line">vim index.html</span><br><span class="line">git commit -a -m &#x27;fixed the broken email address&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://git-scm.com/book/en/v2/images/basic-branching-4.png" alt="基于  分支的紧急问题分支（hotfix branch）。"></p></li><li><p>经过检验，热修复分支解决了问题，那么现在需要将master分支与hotfix分支进行合并：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout master</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge hotfix</span></span><br><span class="line">Updating f42c576..3a0874c</span><br><span class="line">Fast-forward</span><br><span class="line"> index.html | 2 ++</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br></pre></td></tr></table></figure><p>由于你想要合并的分支 <code>hotfix</code> 所指向的提交 <code>C4</code> 是你所在的提交 <code>C2</code> 的直接后继， 因此 Git 会直接将指针向前移动。换句话说，当你试图合并两个分支时， 如果顺着一个分支走下去能够到达另一个分支，那么 Git 在合并两者的时候， 只会简单的将指针向前推进（指针右移），因为这种情况下的合并操作没有需要解决的分歧——这就叫做 “快进（fast-forward）”。</p><p><img src="https://git-scm.com/book/en/v2/images/basic-branching-5.png" alt=" 被快进到 。"></p></li></ul><h3 id="二路合并">二路合并</h3><ul><li>二路合并是最简单的一种合并方式，将两个文件进行逐行比对，如果行内容有差异就报冲突，这时候就需要人工合并差异了。</li></ul><h3 id="三路合并（递归三路合并）">三路合并（递归三路合并）</h3><ul><li><p>对于较少差异的分支，使用二路合并尚且可以接受，但对于较大差异的分支，使用二路合并就非常麻烦了。因此出现了三路合并方法：首先找到两个分支的共同父节点（Base），如果A分支对某内容进行了修改，B分支对这个内容未进行修改，那么会应用A分支的修改，反之应用B分支的修改。</p><p><img src="https://upload-images.jianshu.io/upload_images/11893784-6b0f41a62e828d38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p></li><li><p>回到之前的情景。解决完紧急问题后，需要恢复到之前的工作中，进行后续工作的提交。同时删除hotfix分支，因为已经完成了此次修复，不再需要：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -d hotfix</span></span><br><span class="line">Deleted branch hotfix (3a0874c).</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout iss53</span></span><br><span class="line">Switched to branch &quot;iss53&quot;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim index.html</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -a -m <span class="string">&#x27;finished the new footer [issue 53]&#x27;</span></span></span><br><span class="line">[iss53 ad82d7a] finished the new footer [issue 53]</span><br><span class="line">1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p><img src="https://git-scm.com/book/en/v2/images/basic-branching-6.png" alt="继续在  分支上的工作。"></p></li><li><p>现在iss53问题已经被修复，需要与master分支进行合并：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout master</span></span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge iss53</span></span><br><span class="line">Merge made by the &#x27;recursive&#x27; strategy.</span><br><span class="line">index.html |    1 +</span><br><span class="line">1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p><img src="https://git-scm.com/book/en/v2/images/basic-merging-1.png" alt="一次典型合并中所用到的三个快照。"></p></li><li><p>因为master分支并非是iss53分支的父节点，Git会对这两个分支进行一次简单的三路合并。虽然此次合并写作’recursive’策略，但并非递归三路合并，在Git的输出中，三路合并与递归三路合并都是’recursive’策略，递归三路合并策略通常用于更加复杂的合并场景。</p></li></ul><p><img src="https://git-scm.com/book/en/v2/images/basic-merging-2.png" alt="一个合并提交。"></p><h2 id="处理合并冲突">处理合并冲突</h2><ul><li><p>如果两个分支都对同一段内容做了更改，Git就无法完成合并操作，在合并时就会报合并冲突：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge iss53</span></span><br><span class="line">Auto-merging index.html</span><br><span class="line">CONFLICT (content): Merge conflict in index.html</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure><p>可以使用<code>git status</code>查看当前产生冲突而未合并状态的文件</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run &quot;git commit&quot;)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)</span><br><span class="line"></span><br><span class="line">    both modified:      index.html</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure></li><li><p>任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来。 Git 会在有冲突的文件中加入标准的冲突解决标记，这样你可以打开这些包含冲突的文件然后手动解决冲突。 出现冲突的文件会包含一些特殊区段，看起来像下面这个样子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>contact : email.support@github.com<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">=======</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line"> please contact us at support@github.com</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53:index.html</span><br></pre></td></tr></table></figure><p>这表示 <code>HEAD</code> 所指示的版本（也就是你的 <code>master</code> 分支所在的位置，因为你在运行 merge 命令的时候已经检出到了这个分支）在这个区段的上半部分（<code>=======</code> 的上半部分），而 <code>iss53</code> 分支所指示的版本在 <code>=======</code> 的下半部分。 为了解决冲突，你必须选择使用由 <code>=======</code> 分割的两部分中的一个，或者你也可以自行合并这些内容。 例如，你可以通过把这段内容换成下面的样子来解决冲突：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">please contact us at email.support@github.com</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>手动合并完成后，对冲突文件使用<code>git add</code>将其标记为冲突已解决。</p></li><li><p>如果想使用图形化界面来处理冲突操作，可以使用<code> git mergetool</code>，该命令会为你启动一个合适的可视化合并工具，并带领你一步一步解决这些冲突。退出工具后，Git 会询问刚才的合并是否成功。 如果你回答是，Git 会暂存那些文件以表明冲突已解决： 你可以再次运行 <code>git status</code> 来确认所有的合并冲突都已被解决。</p></li></ul><h2 id="分支管理">分支管理</h2><ul><li><p>使用不带参数的<code>git branch</code>命令可以查看当前分支的列表：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch</span></span><br><span class="line">  iss53</span><br><span class="line">* master</span><br><span class="line">  testing</span><br></pre></td></tr></table></figure><p>其中，带有<code>*</code>的master分支代表当前HEAD指针所指向的分支。</p></li><li><p>如果需要查看每一个分支的最后一次提交，可以使用<code>git branch -v</code>命令：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -v</span></span><br><span class="line">  iss53   93b412c fix javascript issue</span><br><span class="line">* master  7a98805 Merge branch &#x27;iss53&#x27;</span><br><span class="line">  testing 782fd34 add scott to the author list in the readmes</span><br></pre></td></tr></table></figure></li><li><p>还可以使用<code>--merged</code>与<code>--no-merged</code>筛选当前已合并或未合并到当前分支的分支：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch --merged</span></span><br><span class="line">  iss53</span><br><span class="line">* master</span><br></pre></td></tr></table></figure></li><li><p>可以使用<code>git branch -d</code>删除分支，如果删除分支包含了还未合并的工作，则会删除失败：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -d testing</span></span><br><span class="line">error: The branch &#x27;testing&#x27; is not fully merged.</span><br><span class="line">If you are sure you want to delete it, run &#x27;git branch -D testing&#x27;.</span><br></pre></td></tr></table></figure><p>可以使用<code>-D</code>完成强制删除。</p></li></ul><h2 id="远程分支">远程分支</h2><ul><li><p>假设有一个在 <code>git.ourcompany.com</code> 的 Git 服务器。 如果从这里克隆，Git 的 <code>clone</code> 命令会为你自动将其命名为 <code>origin</code>，拉取它的所有数据， 创建一个指向它的 <code>master</code> 分支的指针，并且在本地将其命名为 <code>origin/master</code>。 Git 也会给你一个与 origin 的 <code>master</code> 分支在指向同一个地方的本地 <code>master</code> 分支。</p><p><img src="https://git-scm.com/book/en/v2/images/remote-branches-1.png" alt="克隆之后的服务器与本地仓库。"></p></li><li><p>如果在本地的 <code>master</code> 分支做了一些工作，在同一段时间内有其他人推送提交到 <code>git.ourcompany.com</code> 并且更新了它的 <code>master</code> 分支，这就是说你们的提交历史已走向不同的方向。 即便这样，只要你保持不与 <code>origin</code> 服务器连接（并拉取数据），你的 <code>origin/master</code> 指针就不会移动。</p><p><img src="https://git-scm.com/book/en/v2/images/remote-branches-2.png" alt="本地与远程的工作可以分叉。"></p></li><li><p>如果要与远程仓库同步数据，运行 <code>git fetch &lt;remote&gt;</code> 命令（本例中为 <code>git fetch origin</code>）。 这个命令查找 ``origin’’ 是哪一个服务器（在本例中，它是 <code>git.ourcompany.com</code>）， 从中抓取本地没有的数据，并且更新本地数据库，移动 <code>origin/master</code> 指针到更新之后的位置。</p><p><img src="https://git-scm.com/book/en/v2/images/remote-branches-3.png" alt=" 更新你的远程仓库引用。"></p></li></ul><h2 id="变基">变基</h2><h3 id="变基的使用">变基的使用</h3><ul><li><p>在 Git 中整合来自不同分支的修改主要有两种方法：<code>merge</code> 以及 <code>rebase</code>。假设现在有两个分支分别提交了更新</p><p><img src="https://git-scm.com/book/en/v2/images/basic-rebase-1.png" alt="分叉的提交历史。"></p></li><li><p>如果使用<code>merge</code>合并两个分支，那么会产生一次新的快照。</p><p><img src="https://git-scm.com/book/en/v2/images/basic-rebase-2.png" alt="通过合并操作来整合分叉了的历史。"></p></li><li><p>使用另一种方法：提取C4中引入的补丁和修改，然后再C3的基础上应用一次，这种操作称为<strong>变基（rebase）</strong>。比如，检出experiment分支，将其变基到master分支上：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout experiment</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git rebase master</span></span><br><span class="line">First, rewinding head to replay your work on top of it...</span><br><span class="line">Applying: added staged command</span><br></pre></td></tr></table></figure><p>它的原理是首先找到这两个分支（即当前分支 <code>experiment</code>、变基操作的目标基底分支 <code>master</code>） 的最近共同祖先 <code>C2</code>，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件， 然后将当前分支指向目标基底 <code>C3</code>, 最后以此将之前另存为临时文件的修改依序应用。</p><p><img src="https://git-scm.com/book/en/v2/images/basic-rebase-3.png" alt="将  中的修改变基到  上。"></p></li><li><p>现在回到master分支上，进行一次快进合并：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge experiment</span><br></pre></td></tr></table></figure><p><img src="https://git-scm.com/book/en/v2/images/basic-rebase-4.png" alt=" 分支的快进合并。"></p><p>此时的C4’快照就和使用merge合并产生的C5快照一模一样了。这两种整合方法的最终结果没有任何区别，但是变基使得提交历史更加整洁。 你在查看一个经过变基的分支的历史记录时会发现，尽管实际的开发工作是并行的， 但它们看上去就像是串行的一样，提交历史是一条直线没有分叉。例如向某个其他人维护的项目贡献代码时，首先在自己的分支里进行开发，当开发完成时你需要先将你的代码变基到 <code>origin/master</code> 上，然后再向主项目提交修改。 这样的话，该项目的维护者就不再需要进行整合工作，只需要快进合并便可。</p></li><li><p>对于一个主题分支中再分出一个主题分支的提交，如下图结构</p><p><img src="https://git-scm.com/book/en/v2/images/interesting-rebase-1.png" alt="从一个主题分支里再分出一个主题分支的提交历史。"></p><p>如果希望合并client到master分支，但不希望将server分支合并，此时就可以使用<code>--onto</code>选项，选中在 <code>client</code> 分支里但不在 <code>server</code> 分支里的修改（即 <code>C8</code> 和 <code>C9</code>），将它们在 <code>master</code> 分支上重放：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --onto master server client</span><br></pre></td></tr></table></figure><p>这条语句的意思是：取出 <code>client</code> 分支，找出它从 <code>server</code> 分支分歧之后的补丁， 然后把这些补丁在 <code>master</code> 分支上重放一遍，让 <code>client</code> 看起来像直接基于 <code>master</code> 修改一样。</p><p><img src="https://git-scm.com/book/en/v2/images/interesting-rebase-2.png" alt="截取主题分支上的另一个主题分支，然后变基到其他分支。"></p></li><li><p>那么现在可以使用快进合并合并master分支：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge client</span><br></pre></td></tr></table></figure><p><img src="https://git-scm.com/book/en/v2/images/interesting-rebase-3.png" alt="快进合并  分支，使之包含来自  分支的修改。"></p></li><li><p>如果现在需要将server分支也合并进来，使用变基操作，完成合并，然后删除多余的分支：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge server</span><br><span class="line">git branch -d client</span><br><span class="line">git branch -d server</span><br></pre></td></tr></table></figure><p><img src="https://git-scm.com/book/en/v2/images/interesting-rebase-5.png" alt="最终的提交历史。"></p></li></ul><h3 id="变基的问题">变基的问题</h3><ul><li><p>如果当别人正在基于分支进行开发，那么不应该将分支使用变基合并到主分支上。变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。 如果你已经将提交推送至某个仓库，而其他人也已经从该仓库拉取提交并进行了后续工作，此时，如果你用 <code>git rebase</code> 命令重新整理了提交并再次推送，你的同伴因此将不得不再次将他们手头的工作与你的提交进行整合，如果接下来你还要拉取并整合他们修改过的提交，事情就会变得一团糟。</p></li><li><p>比如，现在有一个公开仓库，你从当前仓库克隆到本地并在此基础上进行开发。</p><p><img src="https://git-scm.com/book/en/v2/images/perils-of-rebasing-1.png" alt="克隆一个仓库，然后在它的基础上进行了一些开发。"></p></li><li><p>然后，某人向该仓库提交了一些修改，其中还包括一次合并。你抓取了远程分支上的修改，然后合并到你的本地分支上。</p><p><img src="https://git-scm.com/book/en/v2/images/perils-of-rebasing-2.png" alt="抓取别人的提交，合并到自己的开发分支。"></p></li><li><p>接下来，这个开发者又决定将合并操作回滚，更换为使用变基合并，并使用<code>git push --force</code>命令覆盖了服务器上的提交历史。然后你向服务器抓取更新，会发现多出来一些新的提交。</p><p><img src="https://git-scm.com/book/en/v2/images/perils-of-rebasing-3.png" alt="有人推送了经过变基的提交，并丢弃了你的本地开发所基于的一些提交。"></p></li><li><p>此时，如果你执行<code>git pull</code>命令提交，就会将已经抛弃的C4和C6快照恢复，最终仓库会如下图所示，变得混乱。</p><p><img src="https://git-scm.com/book/en/v2/images/perils-of-rebasing-4.png" alt="你将相同的内容又合并了一次，生成了一个新的提交。"></p></li></ul><h3 id="解决因变基产生的合并问题">解决因变基产生的合并问题</h3><ul><li><p>假如真的遇到了类似的问题，可以使用一些操作解决。实际上，Git 除了对整个提交计算 SHA-1 校验和以外，也对本次提交所引入的修改计算了校验和——即 “patch-id”。如果你拉取被覆盖过的更新并将你手头的工作基于此进行变基的话，一般情况下 Git 都能成功分辨出哪些是你的修改，并把它们应用到新分支上。</p></li><li><p>这种情况下，如果并非执行合并，而是使用<code>git rebase teamone/master</code>，Git就会执行以下操作：</p><ul><li>检查哪些提交是我们的分支上独有的（C2，C3，C4，C6，C7）</li><li>检查其中哪些提交不是合并操作的结果（C2，C3，C4）</li><li>检查哪些提交在对方覆盖更新时并没有被纳入目标分支（只有 C2 和 C3，因为 C4 其实就是 C4’）</li><li>把查到的这些提交应用在 <code>teamone/master</code> 上面</li></ul><p>那么将会产生如下结构：</p><p><img src="https://git-scm.com/book/en/v2/images/perils-of-rebasing-5.png" alt="在一个被变基然后强制推送的分支上再次执行变基。"></p><p>不过，这种操作需要保证C4’和C4是一样的，否则变基操作将无法识别，并新建另一个类似C4的补丁。</p></li><li><p>还有另一种简单的方法是使用<code>git pull --rebase</code>，或者手动完成这个过程，先 <code>git fetch</code>，再 <code>git rebase teamone/master</code>。</p></li></ul><h2 id="Learn-Git-Branching">Learn Git Branching</h2><ul><li>在<a href="https://learngitbranching.js.org/?locale=zh_CN">Learn Git Branching</a>上，可以进行一部分git命令的教学实验，或者使用沙盒进行测试，通过具象化的图形可以帮助对Git操作的理解。</li></ul>]]></content>
    
    
    <summary type="html">使用分支意味着可以将当前的工作从开发主线上分离开来，以免影响开发主线。</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.iuoyt.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Git" scheme="https://www.iuoyt.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git的指令</title>
    <link href="https://www.iuoyt.com/posts/cbbfdcc5.html"/>
    <id>https://www.iuoyt.com/posts/cbbfdcc5.html</id>
    <published>2023-08-04T04:02:07.000Z</published>
    <updated>2023-09-09T12:15:09.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建Git仓库">创建Git仓库</h2><ul><li><p>在需要创建Git仓库的目录下打开Git Bash，使用<code>git init</code>命令来初始化一个Git仓库，在执行完<code>git init</code>命令后，该目录下会生成一个名为.git的隐藏目录，这个目录中包含了资源的所有元数据。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li><li><p>也可以指定目录作为Git仓库</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init /path/to/your/repo</span><br></pre></td></tr></table></figure></li></ul><h2 id="将文件纳入版本控制">将文件纳入版本控制</h2><h3 id="追踪文件">追踪文件</h3><ul><li><p>在Git仓库目录中，如果有几个文件需要纳入版本控制，需要先使用<code>git add</code>命令告诉Git这些文件需要被追踪。以下命令将README文件提交到仓库中。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add README</span><br></pre></td></tr></table></figure></li><li><p>然后使用<code>git status</code>命令查看当前Git状态，会看到README文件已被跟踪，并处于暂存状态。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with &#x27;origin/master&#x27;.</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">    new file:   README</span><br></pre></td></tr></table></figure></li><li><p>现在修改一个已经被跟踪的文件“<a href="http://CONTRIBUTING.md">CONTRIBUTING.md</a>”，然后运行<code>git status</code>命令，会看到如下内容：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with &#x27;origin/master&#x27;.</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">    new file:   README</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">    modified:   CONTRIBUTING.md</span><br></pre></td></tr></table></figure></li><li><p>文件 <code>CONTRIBUTING.md</code> 出现在 <code>Changes not staged for commit</code> 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。 要暂存这次更新，需要运行 <code>git add</code> 命令：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add CONTRIBUTING.md</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with &#x27;origin/master&#x27;.</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">    new file:   README</span><br><span class="line">    modified:   CONTRIBUTING.md</span><br></pre></td></tr></table></figure></li><li><p>现在两个文件都已暂存，下次提交时就会一并记录到仓库。 假设此时，你想要在 <code>CONTRIBUTING.md</code> 里再加条注释。 重新编辑存盘后，准备好提交。 不过且慢，再运行 <code>git status</code> 看看：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim CONTRIBUTING.md</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with &#x27;origin/master&#x27;.</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">    new file:   README</span><br><span class="line">    modified:   CONTRIBUTING.md</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">    modified:   CONTRIBUTING.md</span><br></pre></td></tr></table></figure></li><li><p>现在 <code>CONTRIBUTING.md</code> 文件同时出现在暂存区和非暂存区。实际上 Git 只暂存了运行 <code>git add</code> 命令时的版本。如果你现在提交，<code>CONTRIBUTING.md</code> 的版本是你最后一次运行 <code>git add</code> 命令时的那个版本，而不是你运行 <code>git commit</code> 时，在工作目录中的当前版本。 所以，运行了 <code>git add</code> 之后又作了修订的文件，需要重新运行 <code>git add</code> 把最新版本重新暂存起来：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add CONTRIBUTING.md</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with &#x27;origin/master&#x27;.</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">    new file:   README</span><br><span class="line">    modified:   CONTRIBUTING.md</span><br></pre></td></tr></table></figure></li></ul><h3 id="状态简览">状态简览</h3><ul><li><p><code>git status</code> 命令的输出十分详细，但其用语有些繁琐。 Git 有一个选项可以帮你缩短状态命令的输出，这样可以以简洁的方式查看更改。 如果你使用 <code>git status -s</code> 命令或 <code>git status --short</code> 命令，你将得到一种格式更为紧凑的输出。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status -s</span></span><br><span class="line"> M README</span><br><span class="line">MM Rakefile</span><br><span class="line">A  lib/git.rb</span><br><span class="line">M  lib/simplegit.rb</span><br><span class="line">?? LICENSE.txt</span><br></pre></td></tr></table></figure></li><li><p>新添加的未跟踪文件前面有 <code>??</code> 标记，新添加到暂存区中的文件前面有 <code>A</code> 标记，修改过的文件前面有 <code>M</code> 标记。 输出中有两栏，左栏指明了暂存区的状态，右栏指明了工作区的状态。例如，上面的状态报告显示： <code>README</code> 文件在工作区已修改但尚未暂存，而 <code>lib/simplegit.rb</code> 文件已修改且已暂存。 <code>Rakefile</code> 文件已修改，暂存后又作了修改，因此该文件的修改中既有已暂存的部分，又有未暂存的部分。</p></li></ul><h3 id="忽略文件">忽略文件</h3><ul><li><p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 <code>.gitignore</code> 的文件，列出要忽略的文件的模式。 来看一个实际的 <code>.gitignore</code> 例子：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> .gitignore</span></span><br><span class="line">*.[oa]</span><br><span class="line">*~</span><br></pre></td></tr></table></figure></li><li><p>第一行告诉 Git 忽略所有以 <code>.o</code> 或 <code>.a</code> 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的。 第二行告诉 Git 忽略所有名字以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。 此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。 要养成一开始就为你的新仓库设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。</p><blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 忽略所有的 .a 文件</span></span><br><span class="line">*<span class="string">.a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件</span></span><br><span class="line">!lib.a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO</span></span><br><span class="line"><span class="string">/TODO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略任何目录下名为 build 的文件夹</span></span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt</span></span><br><span class="line">doc/*<span class="string">.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略 doc/ 目录及其所有子目录下的 .pdf 文件</span></span><br><span class="line">doc/**/*<span class="string">.pdf</span></span><br></pre></td></tr></table></figure><p>GitHub 有一个十分详细的针对数十种项目及语言的 <code>.gitignore</code> 文件列表， 你可以在 <a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a> 找到它。</p></blockquote></li></ul><h3 id="提交更新">提交更新</h3><ul><li><p>现在暂存区已经准备就绪，可以使用<code>git commit</code>提交了。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure></li><li><p>然后会启动你选择的文本编辑器来输入提交说明。编辑器会显示类似下面的文本信息：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Please enter the commit message <span class="keyword">for</span> your changes. Lines starting</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">with <span class="string">&#x27;#&#x27;</span> will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">On branch master</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Your branch is up-to-date with <span class="string">&#x27;origin/master&#x27;</span>.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Changes to be committed:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">new file:   README</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">modified:   CONTRIBUTING.md</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">~</span></span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">&quot;.git/COMMIT_EDITMSG&quot; 9L, 283C</span><br></pre></td></tr></table></figure></li><li><p>可以看到，默认的提交消息包含最后一次运行 <code>git status</code> 的输出，放在注释行里，另外开头还有一个空行，供你输入提交说明。在Vim编辑器中，可以按下<kbd>i</kbd>或者<kbd>Insert</kbd>进入编辑模式。完成编辑后按下<kbd>Esc</kbd>，输入<code>:wq</code>保存并退出文件，如果需要放弃修改并退出，输入<code>:q!</code>。</p></li></ul><h3 id="移除文件">移除文件</h3><ul><li><p>要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。 可以用 <code>git rm</code> 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">rm</span> PROJECTS.md</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with &#x27;origin/master&#x27;.</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        deleted:    PROJECTS.md</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure></li><li><p>如果希望Git不再跟踪文件时，文件可以继续保留在磁盘上，使用<code>--cache</code>选项：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">rm</span> --cached README</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="重命名（移动文件）">重命名（移动文件）</h3><ul><li><p>如果需要在Git跟踪的文件中重命名某个文件，可以使用<code>git mv</code>：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">mv</span> README.md README</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with &#x27;origin/master&#x27;.</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">    renamed:    README.md -&gt; README</span><br></pre></td></tr></table></figure></li><li><p>运行<code>git mv</code>相当于运行了三条命令：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mv</span> README.md README</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">rm</span> README.md</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add README</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="使用远程仓库">使用远程仓库</h2><h3 id="查看远程仓库">查看远程仓库</h3><ul><li><p>如果想查看你已经配置的远程仓库服务器，可以运行 <code>git remote</code> 命令。 它会列出你指定的每一个远程服务器的简写。 如果你已经克隆了自己的仓库，那么至少应该能看到 origin ——这是 Git 给你克隆的仓库服务器的默认名字：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/schacon/ticgit</span></span><br><span class="line">Cloning into &#x27;ticgit&#x27;...</span><br><span class="line">remote: Reusing existing pack: 1857, done.</span><br><span class="line">remote: Total 1857 (delta 0), reused 0 (delta 0)</span><br><span class="line">Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (772/772), done.</span><br><span class="line">Checking connectivity... done.</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ticgit</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote</span></span><br><span class="line">origin</span><br></pre></td></tr></table></figure></li><li><p>你也可以指定选项 <code>-v</code>，会显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote -v</span></span><br><span class="line">originhttps://github.com/schacon/ticgit (fetch)</span><br><span class="line">originhttps://github.com/schacon/ticgit (push)</span><br></pre></td></tr></table></figure></li><li><p>如果你的远程仓库不止一个，该命令会将它们全部列出。 例如，与几个协作者合作的，拥有多个远程仓库的仓库看起来像下面这样：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> grit</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote -v</span></span><br><span class="line">bakkdoor  https://github.com/bakkdoor/grit (fetch)</span><br><span class="line">bakkdoor  https://github.com/bakkdoor/grit (push)</span><br><span class="line">cho45     https://github.com/cho45/grit (fetch)</span><br><span class="line">cho45     https://github.com/cho45/grit (push)</span><br><span class="line">defunkt   https://github.com/defunkt/grit (fetch)</span><br><span class="line">defunkt   https://github.com/defunkt/grit (push)</span><br><span class="line">koke      git://github.com/koke/grit.git (fetch)</span><br><span class="line">koke      git://github.com/koke/grit.git (push)</span><br><span class="line">origin    git@github.com:mojombo/grit.git (fetch)</span><br><span class="line">origin    git@github.com:mojombo/grit.git (push)</span><br></pre></td></tr></table></figure></li><li><p>如果想要查看某一个远程仓库的更多信息，可以使用 <code>git remote show &lt;remote&gt;</code> 命令。 如果想以一个特定的缩写名运行这个命令，例如 <code>origin</code>，会得到像下面类似的信息：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote show origin</span></span><br><span class="line">* remote origin</span><br><span class="line">  Fetch URL: https://github.com/schacon/ticgit</span><br><span class="line">  Push  URL: https://github.com/schacon/ticgit</span><br><span class="line">  HEAD branch: master</span><br><span class="line">  Remote branches:</span><br><span class="line">    master                               tracked</span><br><span class="line">    dev-branch                           tracked</span><br><span class="line">  Local branch configured for &#x27;git pull&#x27;:</span><br><span class="line">    master merges with remote master</span><br><span class="line">  Local ref configured for &#x27;git push&#x27;:</span><br><span class="line">    master pushes to master (up to date)</span><br></pre></td></tr></table></figure></li></ul><h3 id="添加远程仓库">添加远程仓库</h3><ul><li><p>运行 <code>git remote add &lt;shortname&gt; &lt;url&gt;</code> 添加一个新的远程 Git 仓库，同时指定一个方便使用的简写：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote</span></span><br><span class="line">origin</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add pb https://github.com/paulboone/ticgit</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote -v</span></span><br><span class="line">originhttps://github.com/schacon/ticgit (fetch)</span><br><span class="line">originhttps://github.com/schacon/ticgit (push)</span><br><span class="line">pbhttps://github.com/paulboone/ticgit (fetch)</span><br><span class="line">pbhttps://github.com/paulboone/ticgit (push)</span><br></pre></td></tr></table></figure></li><li><p>现在你可以在命令行中使用字符串 <code>pb</code> 来代替整个 URL。 例如，如果你想拉取仓库中有但本地没有的信息，可以运行 <code>git fetch pb</code>：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git fetch pb</span></span><br><span class="line">remote: Counting objects: 43, done.</span><br><span class="line">remote: Compressing objects: 100% (36/36), done.</span><br><span class="line">remote: Total 43 (delta 10), reused 31 (delta 5)</span><br><span class="line">Unpacking objects: 100% (43/43), done.</span><br><span class="line">From https://github.com/paulboone/ticgit</span><br><span class="line"> * [new branch]      master     -&gt; pb/master</span><br><span class="line"> * [new branch]      ticgit     -&gt; pb/ticgit</span><br></pre></td></tr></table></figure></li></ul><h3 id="重命名与移除">重命名与移除</h3><ul><li><p>你可以运行 <code>git remote rename</code> 来修改一个远程仓库的简写名。 例如，想要将 <code>pb</code> 重命名为 <code>paul</code>，可以用 <code>git remote rename</code> 这样做：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote rename pb paul</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote</span></span><br><span class="line">origin</span><br><span class="line">paul</span><br></pre></td></tr></table></figure></li><li><p>值得注意的是这同样也会修改你所有远程跟踪的分支名字。 那些过去引用 <code>pb/master</code> 的现在会引用 <code>paul/master</code>。如果因为一些原因想要移除一个远程仓库，可以使用 <code>git remote remove</code> 或 <code>git remote rm</code> ：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote remove paul</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote</span></span><br><span class="line">origin</span><br></pre></td></tr></table></figure></li><li><p>一旦你使用这种方式删除了一个远程仓库，那么所有和这个远程仓库相关的远程跟踪分支以及配置信息也会一起被删除。</p></li></ul><h2 id="查看提交历史">查看提交历史</h2><ul><li><p>在提交了若干更新，又或者克隆了某个项目之后，你也许想回顾下提交历史。 完成这个任务最简单而又有效的工具是 <code>git log</code> 命令。使用“simplegit”项目作为演示，首先运行下面的命令获取项目：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/schacon/simplegit-progit</span><br></pre></td></tr></table></figure></li><li><p>获取完毕后，在该项目中运行<code>git log</code>命令，可以看到如下输出：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span></span></span><br><span class="line">commit ca82a6dff817ec66f44342007202690a93763949 (HEAD -&gt; master, origin/master, origin/HEAD)</span><br><span class="line">Author: Scott Chacon &lt;schacon@gmail.com&gt;</span><br><span class="line">Date:   Mon Mar 17 21:52:11 2008 -0700</span><br><span class="line"></span><br><span class="line">    changed the verison number</span><br><span class="line"></span><br><span class="line">commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7</span><br><span class="line">Author: Scott Chacon &lt;schacon@gmail.com&gt;</span><br><span class="line">Date:   Sat Mar 15 16:40:33 2008 -0700</span><br><span class="line"></span><br><span class="line">    removed unnecessary test code</span><br><span class="line"></span><br><span class="line">commit a11bef06a3f659402fe7563abf99ad00de2209e6</span><br><span class="line">Author: Scott Chacon &lt;schacon@gmail.com&gt;</span><br><span class="line">Date:   Sat Mar 15 10:31:28 2008 -0700</span><br><span class="line"></span><br><span class="line">    first commit</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>不传入任何参数的默认情况下，<code>git log</code> 会按时间先后顺序列出所有的提交，最近的更新排在最上面。 正如你所看到的，这个命令会列出每个提交的 SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及提交说明。如果希望以补丁的形式查看每次提交所引入的差异，可以使用<code>-p</code>或者<code>--patch</code>，同时可以限制显示的日志条目数量，例如<code>-2</code>代表只显示最近的2次提交：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> -p -2</span></span><br><span class="line">commit ca82a6dff817ec66f44342007202690a93763949 (HEAD -&gt; master, origin/master, origin/HEAD)</span><br><span class="line">Author: Scott Chacon &lt;schacon@gmail.com&gt;</span><br><span class="line">Date:   Mon Mar 17 21:52:11 2008 -0700</span><br><span class="line"></span><br><span class="line">    changed the verison number</span><br><span class="line"></span><br><span class="line">diff --git a/Rakefile b/Rakefile</span><br><span class="line">index a874b73..8f94139 100644</span><br><span class="line">--- a/Rakefile</span><br><span class="line">+++ b/Rakefile</span><br><span class="line">@@ -5,7 +5,7 @@ require &#x27;rake/gempackagetask&#x27;</span><br><span class="line"> spec = Gem::Specification.new do |s|</span><br><span class="line">     s.platform  =   Gem::Platform::RUBY</span><br><span class="line">     s.name      =   &quot;simplegit&quot;</span><br><span class="line">-    s.version   =   &quot;0.1.0&quot;</span><br><span class="line">+    s.version   =   &quot;0.1.1&quot;</span><br><span class="line">     s.author    =   &quot;Scott Chacon&quot;</span><br><span class="line">     s.email     =   &quot;schacon@gmail.com&quot;</span><br><span class="line">     s.summary   =   &quot;A simple gem for using Git in Ruby code.&quot;</span><br><span class="line"></span><br><span class="line">commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7</span><br><span class="line">Author: Scott Chacon &lt;schacon@gmail.com&gt;</span><br><span class="line">Date:   Sat Mar 15 16:40:33 2008 -0700</span><br><span class="line"></span><br><span class="line">    removed unnecessary test code</span><br><span class="line"></span><br><span class="line">diff --git a/lib/simplegit.rb b/lib/simplegit.rb</span><br><span class="line">index a0a60ae..47c6340 100644</span><br><span class="line">--- a/lib/simplegit.rb</span><br><span class="line">+++ b/lib/simplegit.rb</span><br><span class="line">@@ -18,8 +18,3 @@ class SimpleGit</span><br><span class="line">     end</span><br><span class="line"></span><br><span class="line"> end</span><br><span class="line">-</span><br><span class="line">-if $0 == __FILE__</span><br><span class="line">-  git = SimpleGit.new</span><br><span class="line">-  puts git.show</span><br><span class="line">-end</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用<code>--stat</code>可以快速浏览每次提交的简略信息：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --<span class="built_in">stat</span></span></span><br><span class="line">commit ca82a6dff817ec66f44342007202690a93763949 (HEAD -&gt; master, origin/master, origin/HEAD)</span><br><span class="line">Author: Scott Chacon &lt;schacon@gmail.com&gt;</span><br><span class="line">Date:   Mon Mar 17 21:52:11 2008 -0700</span><br><span class="line"></span><br><span class="line">    changed the verison number</span><br><span class="line"></span><br><span class="line"> Rakefile | 2 +-</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7</span><br><span class="line">Author: Scott Chacon &lt;schacon@gmail.com&gt;</span><br><span class="line">Date:   Sat Mar 15 16:40:33 2008 -0700</span><br><span class="line"></span><br><span class="line">    removed unnecessary test code</span><br><span class="line"></span><br><span class="line"> lib/simplegit.rb | 5 -----</span><br><span class="line"> 1 file changed, 5 deletions(-)</span><br><span class="line"></span><br><span class="line">commit a11bef06a3f659402fe7563abf99ad00de2209e6</span><br><span class="line">Author: Scott Chacon &lt;schacon@gmail.com&gt;</span><br><span class="line">Date:   Sat Mar 15 10:31:28 2008 -0700</span><br><span class="line"></span><br><span class="line">    first commit</span><br><span class="line"></span><br><span class="line"> README           |  6 ++++++</span><br><span class="line"> Rakefile         | 23 +++++++++++++++++++++++</span><br><span class="line"> lib/simplegit.rb | 25 +++++++++++++++++++++++++</span><br><span class="line"> 3 files changed, 54 insertions(+)</span><br></pre></td></tr></table></figure></li><li><p>使用<code>--pretty</code>选项可以选择显示样式，比如在一行内查看每次提交：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --pretty=oneline</span></span><br><span class="line">ca82a6dff817ec66f44342007202690a93763949 (HEAD -&gt; master, origin/master, origin/HEAD) changed the verison number</span><br><span class="line">085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test code</span><br><span class="line">a11bef06a3f659402fe7563abf99ad00de2209e6 first commit</span><br></pre></td></tr></table></figure></li><li><p>或者使用<code>--pretty=format:</code>来自定义显示样式：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"> git <span class="built_in">log</span> --pretty=format:<span class="string">&quot;%h - %an, %ar : %s&quot;</span></span></span><br><span class="line">ca82a6d - Scott Chacon, 15 years ago : changed the verison number</span><br><span class="line">085bb3b - Scott Chacon, 15 years ago : removed unnecessary test code</span><br><span class="line">a11bef0 - Scott Chacon, 15 years ago : first commit</span><br></pre></td></tr></table></figure><details class="folding-tag" cyan><summary> --pretty=format 常用选项 </summary>              <div class='content'>              <table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>%H</code></td><td style="text-align:left">提交的完整哈希值</td></tr><tr><td style="text-align:left"><code>%h</code></td><td style="text-align:left">提交的简写哈希值</td></tr><tr><td style="text-align:left"><code>%T</code></td><td style="text-align:left">树的完整哈希值</td></tr><tr><td style="text-align:left"><code>%t</code></td><td style="text-align:left">树的简写哈希值</td></tr><tr><td style="text-align:left"><code>%P</code></td><td style="text-align:left">父提交的完整哈希值</td></tr><tr><td style="text-align:left"><code>%p</code></td><td style="text-align:left">父提交的简写哈希值</td></tr><tr><td style="text-align:left"><code>%an</code></td><td style="text-align:left">作者名字</td></tr><tr><td style="text-align:left"><code>%ae</code></td><td style="text-align:left">作者的电子邮件地址</td></tr><tr><td style="text-align:left"><code>%ad</code></td><td style="text-align:left">作者修订日期（可以用 --date=选项 来定制格式）</td></tr><tr><td style="text-align:left"><code>%ar</code></td><td style="text-align:left">作者修订日期，按多久以前的方式显示</td></tr><tr><td style="text-align:left"><code>%cn</code></td><td style="text-align:left">提交者的名字</td></tr><tr><td style="text-align:left"><code>%ce</code></td><td style="text-align:left">提交者的电子邮件地址</td></tr><tr><td style="text-align:left"><code>%cd</code></td><td style="text-align:left">提交日期</td></tr><tr><td style="text-align:left"><code>%cr</code></td><td style="text-align:left">提交日期（距今多长时间）</td></tr><tr><td style="text-align:left"><code>%s</code></td><td style="text-align:left">提交说明</td></tr></tbody></table>              </div>            </details><details class="folding-tag" yellow><summary> git log常用选项 </summary>              <div class='content'>              <table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>-p</code></td><td style="text-align:left">按补丁格式显示每个提交引入的差异。</td></tr><tr><td style="text-align:left"><code>--stat</code></td><td style="text-align:left">显示每次提交的文件修改统计信息。</td></tr><tr><td style="text-align:left"><code>--shortstat</code></td><td style="text-align:left">只显示 --stat 中最后的行数修改添加移除统计。</td></tr><tr><td style="text-align:left"><code>--name-only</code></td><td style="text-align:left">仅在提交信息后显示已修改的文件清单。</td></tr><tr><td style="text-align:left"><code>--name-status</code></td><td style="text-align:left">显示新增、修改、删除的文件清单。</td></tr><tr><td style="text-align:left"><code>--abbrev-commit</code></td><td style="text-align:left">仅显示 SHA-1 校验和所有 40 个字符中的前几个字符。</td></tr><tr><td style="text-align:left"><code>--relative-date</code></td><td style="text-align:left">使用较短的相对时间而不是完整格式显示日期（比如“2 weeks ago”）。</td></tr><tr><td style="text-align:left"><code>--graph</code></td><td style="text-align:left">在日志旁以 ASCII 图形显示分支与合并历史。</td></tr><tr><td style="text-align:left"><code>--pretty</code></td><td style="text-align:left">使用其他格式显示历史提交信息。可用的选项包括 oneline、short、full、fuller 和 format（用来定义自己的格式）。</td></tr><tr><td style="text-align:left"><code>--oneline</code></td><td style="text-align:left"><code>--pretty=oneline --abbrev-commit</code> 合用的简写。</td></tr></tbody></table>              </div>            </details><details class="folding-tag" blue><summary> 限制git log输出的选项 </summary>              <div class='content'>              <table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>-&lt;n&gt;</code></td><td style="text-align:left">仅显示最近的 n 条提交。</td></tr><tr><td style="text-align:left"><code>--since</code>, <code>--after</code></td><td style="text-align:left">仅显示指定时间之后的提交。</td></tr><tr><td style="text-align:left"><code>--until</code>, <code>--before</code></td><td style="text-align:left">仅显示指定时间之前的提交。</td></tr><tr><td style="text-align:left"><code>--author</code></td><td style="text-align:left">仅显示作者匹配指定字符串的提交。</td></tr><tr><td style="text-align:left"><code>--committer</code></td><td style="text-align:left">仅显示提交者匹配指定字符串的提交。</td></tr><tr><td style="text-align:left"><code>--grep</code></td><td style="text-align:left">仅显示提交说明中包含指定字符串的提交。</td></tr><tr><td style="text-align:left"><code>-S</code></td><td style="text-align:left">仅显示添加或删除内容匹配指定字符串的提交。</td></tr></tbody></table>              </div>            </details></li></ul><h2 id="Git的基本操作">Git的基本操作</h2><ul><li>以下6条命令是Git最常使用的命令：<ul><li>git clone / git fetch</li><li>git pull</li><li>git checkout (git switch / git restore)</li><li>git add</li><li>git commit</li><li>git push</li></ul></li></ul><p><img src="https://s1.vika.cn/space/2023/07/29/f0e889650d7c48c9b66463f0e1d2930c" alt="git-command"></p><ul><li>其中：<ul><li>workspace：工作区</li><li>staging area：暂存区（缓存区）</li><li>local repository：本地仓库（版本库）</li><li>remote repository：远程仓库</li></ul></li></ul><h3 id="git-clone">git clone</h3><ul><li><p>如果需要下载Git仓库到本地目录中，可以使用下面两种指令。第一种将Git仓库克隆到当前执行Git命令的目录下，第二种将Git仓库克隆到指定目录下。当你执行 <code>git clone</code> 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。其中：</p><ul><li>&lt;repo&gt;：需要克隆的Git仓库</li><li>&lt;directory&gt;：本地目录</li></ul><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;repo&gt;</span><br><span class="line">git clone &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-fetch">git fetch</h3><ul><li><p><code>git fetch</code>用于更新本地仓库，但不会自动合并或修改本地代码，在查看远程仓库最新更新、了解其他开发者的提交或者想手动处理合并时，则使用<code>git fetch</code>操作，然后使用<code>git merge</code>合并分支。其中：</p><ul><li>&lt;alias&gt;：远程仓库的别名，通常是origin</li><li>&lt;branch&gt;：分支名称，如master</li></ul><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch &lt;alias&gt;</span><br><span class="line">git merge &lt;alias&gt;/&lt;branch&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-pull">git pull</h3><ul><li><p><code>git pull</code>与<code>git clone</code>的作用类似，都是从代码仓库获取代码，不同的是，<code>git clone</code>会覆盖本地仓库中的内容，<code>git pull</code>则是将远程拉取的代码与本地的版本合并，本质是将<code>git fetch</code>和<code>git merge</code>一并完成。<code>git pull</code>有三种写法，第一种是从远程仓库拉取当前所跟踪的分支，第二种则指定远程分支，第三种则指定本地分支。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;远程仓库名&gt;</span><br><span class="line">git pull &lt;远程仓库名&gt; &lt;远程分支名&gt;</span><br><span class="line">git pull &lt;远程仓库名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure></li><li><p>在指定本地分支时，远程分支不可以省略，即不可以写成如下样式：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;远程仓库名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-checkout-git-switch-git-restore">git checkout (git switch + git restore)</h3><ul><li><p><code>git checkout</code>用于切换本地分支，可以从当前分支切换到另一个存在的分支。同时<code>git checkout</code>还可以将文件恢复到最近一次提交的状态，即撤销对文件的修改。如果需要切换分支的同时创建分支，可以使用<code>-b</code>参数</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;分支名&gt;</span><br><span class="line">git checkout -b &lt;新分支名&gt;</span><br><span class="line">git checkout &lt;文件名&gt;</span><br></pre></td></tr></table></figure></li><li><p>在2.23版本中，Git引入了两个新的指令：switch和restore，替代了部分checkout的功能。其中switch用来切换分支，restore用来恢复文件，但checkout仍然可以继续使用。在使用switch切换分支时，可以使用<code>-c</code>参数同时创建分支</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git switch &lt;分支名&gt;</span><br><span class="line">git switch -c &lt;新分支名&gt;</span><br><span class="line">gitt restore &lt;文件名&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-add">git add</h3><ul><li><p><code>git add</code>命令可将该文件的修改添加到暂存区。通过运行<code>git add</code>命令，你可以告诉 Git 哪些文件的修改应该包含在下一次提交（commit）中。</p></li><li><p>添加一个或多个文件到暂存区：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add [file1] [file2] ...</span><br></pre></td></tr></table></figure><p>添加指定目录到暂存区，包括子目录：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add [dir]</span><br></pre></td></tr></table></figure><p>添加当前目录下的所有文件到暂存区：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-commit">git commit</h3><ul><li><p><code>git commit</code>命令将暂存区内容添加到本地仓库中。</p></li><li><p>提交暂存区到本地仓库中，[message] 可以是一些备注信息：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> commit -m<span class="meta"> [message]</span></span><br></pre></td></tr></table></figure><p>提交暂存区的指定文件到仓库区：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit <span class="comment">[file1]</span> <span class="comment">[file2]</span> ... -m <span class="comment">[message]</span></span><br></pre></td></tr></table></figure><p><code>-a</code>参数设置修改文件后不需要执行 git add 命令，直接来提交</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -a</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="git-push">git push</h3><ul><li><p>使用<code>git push</code>可以将项目推送到上游，比如想要将 <code>master</code> 分支推送到 <code>origin</code> 服务器时：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></li><li><p>只有当你有所克隆服务器的写入权限，并且之前没有人推送过时，这条命令才能生效。 当你和其他人在同一时间克隆，他们先推送到上游然后你再推送到上游，你的推送就会被拒绝，需要先抓取他们的工作并将其合并进你的工作后才能推送。</p></li></ul><h2 id="为提交结点打上标签">为提交结点打上标签</h2><ul><li>像其他版本控制系统（VCS）一样，Git 可以给仓库历史中的某一个提交打上标签，以示重要。 比较有代表性的是人们会使用这个功能来标记发布结点（ <code>v1.0</code> 、 <code>v2.0</code> 等等）。</li></ul><h3 id="创建标签">创建标签</h3><ul><li><p>Git 支持两种标签：轻量标签（lightweight）与附注标签（annotated）。</p><ul><li><p>轻量标签没有保存任何其他信息，只需要提供标签名字：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.4-lw</span><br></pre></td></tr></table></figure></li><li><p>而附注标签是存储在 Git 数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件地址、日期时间， 此外还有一个标签信息，并且可以使用 GNU Privacy Guard （GPG）签名并验证。 通常会建议使用<code>-a</code>创建附注标签，这样你可以拥有以上所有信息：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v1.4 -m &quot;my version 1.4&quot;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="标签补打">标签补打</h3><ul><li><p>假设提交历史如下：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --pretty=oneline</span></span><br><span class="line">9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile</span><br></pre></td></tr></table></figure></li><li><p>假设在“updated rakefile” 提交时忘记给项目打标签，可以在之后补上标签。 要在哪一次提交上打标签，就需要在命令的末尾指定哪一次提交的校验和（或部分校验和）：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git tag -a v1.0 9fceb02</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="删除标签">删除标签</h3><ul><li><p>要删除掉本地仓库上的标签，可以使用命令 <code>git tag -d &lt;tagname&gt;</code>。 例如，可以使用以下命令删除一个轻量标签：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git tag -d v1.4</span></span><br><span class="line">Deleted tag &#x27;v1.4&#x27; (was e7d5add)</span><br></pre></td></tr></table></figure></li><li><p>上述命令并不会从任何远程仓库中移除这个标签，需要用 <code>git push</code> 来更新远程仓库：</p><ul><li><p><code>git push &lt;remote&gt; :refs/tags/&lt;tagname&gt;</code> ，这种操作的含义是，将冒号前面的空值推送到远程标签名，从而高效地删除它：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin :refs/tags/v1.4</span></span><br><span class="line">To /git@github.com:schacon/simplegit.git</span><br><span class="line"> - [deleted]         v1.4</span><br></pre></td></tr></table></figure></li><li><p>第二种更直观的删除远程标签的方式是：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin --delete &lt;tagname&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Git别名">Git别名</h2><ul><li><p>Git可以为命令设置自定义别名，通过<code>git config</code>来为命令设置别名，例如：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.co checkout</span><br><span class="line">git config --global alias.ci commit</span><br><span class="line">git config --global alias.unstage &#x27;reset HEAD --&#x27;</span><br></pre></td></tr></table></figure></li><li><p>那么如果需要输入<code>git commit</code>时，就可以通过输入<code>git ci</code>替代</p><p>如果需要输入<code>git reset HEAD -- fileA</code>时，可以用<code>git unstage fileA</code>替代</p></li></ul>]]></content>
    
    
    <summary type="html">Git 的工作就是创建和保存项目的快照及与之后的快照进行对比，这篇文章是对相关的命令的介绍。</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.iuoyt.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Git" scheme="https://www.iuoyt.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>关于Git</title>
    <link href="https://www.iuoyt.com/posts/189553d2.html"/>
    <id>https://www.iuoyt.com/posts/189553d2.html</id>
    <published>2023-07-29T08:51:48.000Z</published>
    <updated>2023-09-09T12:15:09.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本控制是什么">版本控制是什么</h2><ul><li><p>版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。</p><blockquote><p>如果你是位图形或网页设计师，可能会需要保存某一幅图片或页面布局文件的所有修订版本（这或许是你非常渴望拥有的功能），采用版本控制系统（VCS）是个明智的选择。 有了它你就可以将选定的文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态，你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等。 使用版本控制系统通常还意味着，就算你乱来一气把整个项目中的文件改的改删的删，你也照样可以轻松恢复到原先的样子。 但额外增加的工作量却微乎其微。</p></blockquote></li></ul><h2 id="本地版本控制系统">本地版本控制系统</h2><ul><li>为了解决在工作中常常出现的写错文件或者意外覆盖不该覆盖的文件，人们很早就开发了许多本地版本控制系统，大多都是采用某种简单的数据库来记录文件的历次更新差异。但接下来又出现了新的问题，如何让在不同系统的不同开发者协同工作呢？</li></ul><h3 id="集中化的版本控制系统（CVCS）">集中化的版本控制系统（CVCS）</h3><ul><li><p>为了解决协同办公问题，集中化的版本控制系统诞生了，诸如CVS、SVN等，都有一个集中管理的服务器保存所有文件的修订版本。所有的代码都由中央仓库集中管理，每个开发者都使用同一个中央仓库进行开发，这样一来，每个人都可以看到其他人正在做些什么，而管理员也可以轻松地掌控每个开发者的权限，并且管理一个服务器也比管理各个客户端上的数据库更加轻松容易。但是，也有着一个显而易见的缺点，因为必须依靠网络连接来提交和获取代码，因此没有网络时则无法进行版本控制操作。如果服务器发生故障，那么这段时间里谁也无法更新提交，而若中心数据库的磁盘发生故障，而有没有做好备份，那么就会丢失所有数据。</p><p><img src="https://s1.vika.cn/space/2023/07/29/f17c8559b05d4332a9559859e64806bc" alt="centralized"></p></li></ul><h3 id="分布式版本控制系统（DVCS）">分布式版本控制系统（DVCS）</h3><ul><li><p>为了避免文件因为中心数据库的损坏而完全丢失的问题，分布式版本控制系统诞生了，客户端不只是提取最新版本的文件快照，而是把代码仓库完整地镜像下来，每个开发者都可以在本地拥有完整的代码仓库副本。这样一来，客户端可以在没有网络的情况下进行代码修改和版本控制，同时也避免了数据丢失的问题。</p><p><img src="https://s1.vika.cn/space/2023/07/29/16a1ceb2842248e88763ebd6718f52e4" alt="distributed"></p></li></ul><h2 id="Git是什么">Git是什么</h2><ul><li>Git和其他版本控制系统有着一定的差别，尽管有着相同的目的，实现方式却是截然不同的。</li></ul><h3 id="基于差异的版本控制">基于差异的版本控制</h3><ul><li><p>CVS、SVN等系统的你工作方式是基于变更集的，以文件变更列表的方式存储信息，每次提交只记录具有差异的内容，因此一组文件的存储信息则是每个文件随时间逐步积累的差异。</p><p><img src="https://s1.vika.cn/space/2023/07/29/4c7165c1287f497ebc197f833ee33dd9" alt="deltas"></p></li></ul><h3 id="基于快照的版本控制">基于快照的版本控制</h3><ul><li><p>与其他的版本控制系统不同的是，Git 更像是把数据看作是对小型文件系统的一系列快照。在Git中，每次提交更新或者保存项目状态时，就会对现在的全部文件创建一个快照并保存这个快照的索引，对于没有修改的文件，则是保留一个链接指向之前存储的文件。</p><p><img src="https://s1.vika.cn/space/2023/07/29/eb2c04f160cc4fc19875fc0074f79146" alt="snapshots"></p></li><li><p>在使用体验上，Git相较其他版本控制系统有着更好的性能，由于本地存储于快照机制，速度通常更快，同时Git也有着较为强大的分支处理机制，与较为复杂的SVN相比更加灵活与简便。</p></li></ul><h2 id="Git的安装">Git的安装</h2><div class="tabs" id="git的安装"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#git的安装-1">Windows</button></li><li class="tab"><button type="button" data-href="#git的安装-2">Mac</button></li><li class="tab"><button type="button" data-href="#git的安装-3">Linux/Unix</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="git的安装-1"><ol><li><p>进入<a href="https://git-scm.com/download/win">Git下载</a>页面，或者进入<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">国内镜像源</a>，选择安装包文件下载</p></li><li><p>使用安装包安装Git</p></li><li><p>打开控制台（命令提示符），输入以下内容，若显示Git的版本号则安装成功</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git的安装-2"><div class="tabs" id="mac下git的安装"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#mac下git的安装-1">方法一</button></li><li class="tab"><button type="button" data-href="#mac下git的安装-2">方法二</button></li><li class="tab"><button type="button" data-href="#mac下git的安装-3">方法三</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="mac下git的安装-1"><p><strong>使用Homebrew安装</strong></p><ol><li><p>打开终端应用程序（Terminal）</p></li><li><p>输入以下指令安装HomeBrew</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></pre></td></tr></table></figure></li><li><p>输入以下指令安装Git</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure></li><li><p>验证Git是否安装成功，若显示Git的版本号，则安装成功</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mac下git的安装-2"><p><strong>使用Xcode Command Line Tools安装</strong></p><ol><li><p>打开终端应用程序（Terminal）</p></li><li><p>输入以下指令安装Xcode Command Line Tools</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure></li><li><p>验证Git是否安装成功，若显示Git的版本号，则安装成功</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mac下git的安装-3"><p><strong>作为GitHub for macOS的一部分来安装</strong></p><p>在安装软件时，提供了安装命令行工具的选项，可以从<a href="https://mac.github.com/">GitHub for macOS网站</a>下载该安装包。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git的安装-3"><p><strong>Debian/Ubuntu 使用以下指令</strong></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install git</span><br></pre></td></tr></table></figure><p><strong>CentOS 使用以下指令</strong></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><p>安装完成后，检查是否安装成功</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="运行Git前的配置">运行Git前的配置</h2><blockquote><p>Git 自带一个 <code>git config</code> 的工具来帮助设置控制 Git 外观和行为的配置变量。 这些变量存储在三个不同的位置：</p><ol><li><code>/etc/gitconfig</code> 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果在执行 <code>git config</code> 时带上 <code>--system</code> 选项，那么它就会读写该文件中的配置变量。 （由于它是系统配置文件，因此你需要管理员或超级用户权限来修改它。）</li><li><code>~/.gitconfig</code> 或 <code>~/.config/git/config</code> 文件：只针对当前用户。 你可以传递 <code>--global</code> 选项让 Git 读写此文件，这会对你系统上 <strong>所有</strong> 的仓库生效。</li><li>当前使用仓库的 Git 目录中的 <code>config</code> 文件（即 <code>.git/config</code>）：针对该仓库。 你可以传递 <code>--local</code> 选项让 Git 强制读写此文件，虽然默认情况下用的就是它。。 （当然，你需要进入某个 Git 仓库中才能让该选项生效。）</li></ol><p>每一个级别会覆盖上一级别的配置，所以 <code>.git/config</code> 的配置变量会覆盖 <code>/etc/gitconfig</code> 中的配置变量。</p><p>在 Windows 系统中，Git 会查找 <code>$HOME</code> 目录下（一般情况下是 <code>C:\Users\$USER</code> ）的 <code>.gitconfig</code> 文件。 Git 同样也会寻找 <code>/etc/gitconfig</code> 文件，但只限于 MSys 的根目录下，即安装 Git 时所选的目标位置。 如果你在 Windows 上使用 Git 2.x 以后的版本，那么还有一个系统级的配置文件，Windows XP 上在 <code>C:\Documents and Settings\All Users\Application Data\Git\config</code> ，Windows Vista 及其以后的版本在 <code>C:\ProgramData\Git\config</code> 。此文件只能以管理员权限通过 <code>git config -f &lt;file&gt;</code> 来修改。</p><p>你可以通过以下命令查看所有的配置以及它们所在的文件：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list --show-origin</span><br></pre></td></tr></table></figure></blockquote><ul><li>配置Git的相关内容通常使用的是Git Bash，可以在windows菜单中找到，或者在任意目录下右击鼠标，选择<code>Open Git Bash here</code>打开。如果配置好了Git的环境变量，那么也可以直接在命令行中输入（判断是否可用最简单的办法是在命令行中输入<code>git --version</code>查看是否显示版本号）。</li></ul><h3 id="用户信息">用户信息</h3><ul><li><p>安装完 Git 之后，要做的第一件事就是设置你的用户名和邮件地址。 这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中。</p></li><li><p>输入以下内容配置Git的用户名和电子邮件地址。如果使用了 <code>--global</code> 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 <code>--global</code> 选项的命令来配置。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的用户名&quot;</span><br><span class="line">git config --global user.email 你的邮箱</span><br></pre></td></tr></table></figure></li></ul><h3 id="文本编辑器">文本编辑器</h3><ul><li><p>当 Git 需要输入信息时会调用文本编辑器。 如果未配置，Git 会使用操作系统默认的文本编辑器。在 Windows 系统上，如果你想要使用别的文本编辑器，那么必须指定可执行文件的完整路径，它可能随你的编辑器的打包方式而不同。如果你想使用不同的文本编辑器，例如 Emacs，可以这样做：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.editor emacs</span><br></pre></td></tr></table></figure><blockquote><p>对于 Notepad++，一个流行的代码编辑器来说，你可能想要使用 32 位的版本， 因为在本书编写时 64 位的版本尚不支持所有的插件。 如果你在使用 32 位的 Windows 系统，或在 64 位系统上使用 64 位的编辑器，那么你需要输入如下命令：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global core.editor <span class="string">&quot;&#x27;C:/Program Files/Notepad++/notepad++.exe&#x27; -multiInst -notabbar -nosession -noPlugin&quot;</span></span></span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="查看配置信息">查看配置信息</h3><ul><li><p>需要检查已有的配置信息时，可以使用如下命令。有时会看到重复的变量名，分别来自不同的配置文件，最终Git实际使用的是最后一条。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure></li><li><p>也可以直接查阅某个环境变量的设定值，例如使用下面的命令查询配置的用户名和邮箱。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure></li></ul><h2 id="获取帮助">获取帮助</h2><ul><li><p>如果需要获取Git指令的帮助，可以使用如下三种指令：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git help &lt;verb&gt;</span><br><span class="line">git &lt;verb&gt; --help</span><br><span class="line">man git-&lt;verb&gt;</span><br></pre></td></tr></table></figure></li><li><p>例如，想要查看<code>git config</code>的手册，可以输入：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git help config</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.iuoyt.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Git" scheme="https://www.iuoyt.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Markdown的扩展语法</title>
    <link href="https://www.iuoyt.com/posts/1a959ff5.html"/>
    <id>https://www.iuoyt.com/posts/1a959ff5.html</id>
    <published>2023-07-19T07:14:22.000Z</published>
    <updated>2023-09-09T12:15:09.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="表格">表格</h2><p>要添加表格，需要使用三个或多个连字符“<code>---</code>”创建每列的标题，并使用竖线符号分隔每列。即使每一行的竖线分隔并未对齐，Markdown编辑器也可以成功创建表格。但通过以上方法创建表格较为麻烦，大部分的Markdown编辑器都有快速创建表格的方式。同时，可以在连字符的左侧、右侧或者两端添加冒号“<code>:</code>”使该列应用不同的对齐方式。</p><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Syntax | Description | Test Text |</span><br><span class="line">| :--- | :----: | ---: |</span><br><span class="line">| Header | Title | Here&#x27;s this |</span><br><span class="line">| Paragraph | Text | And more |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th style="text-align:left">Syntax</th><th style="text-align:center">Description</th><th style="text-align:right">Test Text</th></tr></thead><tbody><tr><td style="text-align:left">Header</td><td style="text-align:center">Title</td><td style="text-align:right">Here’s this</td></tr><tr><td style="text-align:left">Paragraph</td><td style="text-align:center">Text</td><td style="text-align:right">And more</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>在表格中，标题、块引用、列表、水平规则、图像或HTML标签并不会被渲染成对应样式，但可以在表格中添加链接、代码（通过反引号包裹）和强调。如果需要在表格中展示竖线符号，需要使用其对应的实体代码，参考<a href="/posts/2023-07/81d4d2a5.html#%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E7%9A%84%E8%BD%AC%E4%B9%89">特殊字符的转义</a></p><h2 id="脚注">脚注</h2><p>为文本添加脚注后，可以在标识符处查看脚注的内容。在对应文本处添加方括号包围的标识符（<code>[^1]</code>），标识符可以是数字或者字符，但不能包含空格及制表符。</p><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Here&#x27;s a simple footnote[^1], and here&#x27;s a longer one[^bignote].</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^1</span>]: <span class="link">This is the first footnote.</span></span><br><span class="line"></span><br><span class="line">[<span class="symbol">^bignote</span>]: <span class="link">Here&#x27;s one with multiple paragraphs and code.</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><img src="https://s1.vika.cn/space/2023/07/19/7a4f0057bfdd430e997c6b50f7109d06" alt="2023719-15526-HD 00_00_00-00_00_03"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="删除线">删除线</h2><p>分别使用两个波浪线符号“<code>~</code>”包裹内容可以在内容上放置一条水平线。</p><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~世界是平坦的。~~ 我们现在知道世界是圆的。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><s>世界是平坦的。</s> 我们现在知道世界是圆的。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="任务列表">任务列表</h2><p>在支持任务列表的Markdown应用程序中，复选框将显示在内容旁边。要创建任务列表，请在任务列表项之前添加破折号<code>-</code>和方括号<code>[ ]</code>，并在<code>[ ]</code>前面加上空格。要选择一个复选框，请在方括号<code>[x]</code>之间添加 x 。</p><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> [x] Write the press release</span><br><span class="line"><span class="bullet">-</span> [ ] Update the website</span><br><span class="line"><span class="bullet">-</span> [ ] Contact the media</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>[x] Write the press release</li><li>[ ] Update the website</li><li>[ ] Contact the media</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="Emoji表情">Emoji表情</h2><p>有两种方法可以将表情符号添加到Markdown文件中：将表情符号复制并粘贴到Markdown格式的文本中，或者键入简码（<em>emoji shortcodes</em>）。</p><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">去露营了！ :tent: 很快回来。</span><br><span class="line"></span><br><span class="line">真好笑！ :joy:</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>去露营了！ ⛺ 很快回来。</p><p>真好笑！ 😂</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="自动网址链接">自动网址链接</h2><p>许多Markdown处理器会自动将URL转换为链接。这意味着如果输入http://www.example.com，即使未<a href="https://markdown.com.cn/basic-syntax/links.html">使用方括号</a>，Markdown处理器也会自动将其转换为链接。而如果不希望自动链接，则可以通过反引号包裹来删除链接。</p><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://www.example.com</span><br><span class="line"><span class="code">`http://www.example.com`</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><a href="http://www.example.com">http://www.example.com</a><br><code>http://www.example.com</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="标题链接">标题链接</h2><p>通过创建带有井号“<code>#</code>”和自定义标题ID的<code>[Heading ID](#title)</code>，可以链接到文档中对应的标题。</p><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">标题链接</span>](<span class="link">#标题链接</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><a href="/posts/2023-07/1a959ff5.html#%E6%A0%87%E9%A2%98%E9%93%BE%E6%8E%A5">标题链接</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">基本语法是为了应对大多数日常情况，而有特殊需求的地方就需要用到扩展语法了。</summary>
    
    
    
    <category term="Markdown" scheme="https://www.iuoyt.com/categories/Markdown/"/>
    
    
    <category term="Markdown" scheme="https://www.iuoyt.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Markdown的基本语法</title>
    <link href="https://www.iuoyt.com/posts/81d4d2a5.html"/>
    <id>https://www.iuoyt.com/posts/81d4d2a5.html</id>
    <published>2023-07-18T07:46:55.000Z</published>
    <updated>2023-09-09T12:15:09.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标题">标题</h2><p>在标题文字之前添加“<code>#</code>”，井号的数量对应着标题的等级，从1到6为从大到小，依次对应HTML中的标签 <code>&lt;h1&gt;</code>到 <code>&lt;h6&gt;</code>。</p><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Heading level 1</span></span><br><span class="line"><span class="section">## Heading level 2</span></span><br><span class="line"><span class="section">### Heading level 3</span></span><br><span class="line"><span class="section">#### Heading level 4</span></span><br><span class="line"><span class="section">##### Heading level 5</span></span><br><span class="line"><span class="section">###### Heading level 6</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>效果请见文章内的标题。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="段落">段落</h2><p>Markdown使用空白行将文本分为两个段落，对应HTML的 <code>&lt;p&gt;</code>标签。</p><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I really like using Markdown.</span><br><span class="line"></span><br><span class="line">I think I&#x27;ll use it to format all of my documents from now on.</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>I really like using Markdown.</p><p>I think I’ll use it to format all of my documents from now on.</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="换行">换行</h2><p>在一行文本的末尾添加两个以上空格并回车，对应HTML中的 <code>&lt;br&gt;</code>标签</p><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This is the first line.  </span><br><span class="line">And this is the second line.</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>This is the first line.<br>And this is the second line.</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="强调">强调</h2><h3 id="粗体（Bold）">粗体（Bold）</h3><p>在需要强调的文本前后添加两个星号“<code>**</code>”或者下划线“<code>__</code>”，对应HTML中的 <code>&lt;strong&gt;</code>标签。</p><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**Bold text**</span> with asterisks.</span><br><span class="line"><span class="strong">__Bold text__</span> with underscores.</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><strong>Bold text</strong> with asterisks.<br><strong>Bold text</strong> with underscores.</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="斜体（Italic）">斜体（Italic）</h3><p>再需要倾斜的文本前后添加一个星号“<code>*</code>”或者下划线“<code>_</code>”，对应HTML中的 <code>&lt;em&gt;</code>标签。</p><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Italicized text is the <span class="emphasis">*cat&#x27;s meow*</span>.</span><br><span class="line">Italicized text is the <span class="emphasis">_cat&#x27;s meow_</span>.</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>Italicized text is the <em>cat’s meow</em>.<br>Italicized text is the <em>cat’s meow</em>.</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="粗体（Bold）-斜体（Italic）">粗体（Bold）+ 斜体（Italic）</h3><p>如果需要同时对同一段文本使用粗体和斜体，可以在强调文本的前后添加三个星号“<code>*</code>”或者下划线“<code>_</code>”，或者混合使用。</p><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">This text is <span class="strong">**<span class="emphasis">*really important*</span>**</span>.</span><br><span class="line">This text is <span class="strong">__<span class="emphasis">_really important_</span>__</span>.</span><br><span class="line">This text is <span class="strong">__<span class="emphasis">*really important*</span>__</span>.</span><br><span class="line">This text is <span class="strong">**<span class="emphasis">_really important_</span>**</span>.</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>This text is <em><strong>really important</strong></em>.<br>This text is <em><strong>really important</strong></em>.<br>This text is <strong><em>really important</em></strong>.<br>This text is <strong><em>really important</em></strong>.</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="引用">引用</h2><p>在引用文本前使用右尖括号“<code>&gt;</code>”，符号可以重复，实现多级引用的效果，同时引用的内容也可以兼容其他元素效果</p><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  The quarterly results look great!</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt;&gt; - Revenue was off the chart.</span></span><br><span class="line">&gt;&gt; - Profits were higher than ever.</span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt;  <span class="emphasis">*Everything*</span> is going according to <span class="strong">**plan**</span>.</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><blockquote><p>The quarterly results look great!</p><blockquote><ul><li>Revenue was off the chart.</li><li>Profits were higher than ever.</li></ul></blockquote><p><em>Everything</em> is going according to <strong>plan</strong>.</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="列表">列表</h2><h3 id="有序列表">有序列表</h3><p>在每个列表项前添加数字并紧跟一个英文句点，对应HTML的 <code>&lt;ol&gt;</code>和 <code>&lt;li&gt;</code>。数字不必按数学顺序排列，但是列表应当以数字 1 起始。通过使用缩进可以形成多级列表的样式。</p><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> First item</span><br><span class="line"><span class="bullet">8.</span> Second item</span><br><span class="line"><span class="bullet">5.</span> Third item</span><br><span class="line"><span class="bullet">1.</span> Indented item</span><br><span class="line"><span class="bullet">    2.</span> Indented item</span><br><span class="line"><span class="bullet">2.</span> Fourth item</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>First item</li><li>Second item</li><li>Third item<ol><li>Indented item</li><li>Indented item</li></ol></li><li>Fourth item</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="无序列表">无序列表</h3><p>在每个列表项前面添加破折号“<code>-</code>”、星号“<code>*</code>” 或加号“<code>+</code>”。缩进一个或多个列表项可创建嵌套列表。对应HTML的 <code>&lt;ul&gt;</code>和 <code>&lt;li&gt;</code></p><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> First item</span><br><span class="line"><span class="bullet">-</span> Second item</span><br><span class="line"><span class="bullet">-</span> Third item</span><br><span class="line"><span class="bullet">    -</span> Indented item</span><br><span class="line"><span class="bullet">    -</span> Indented item</span><br><span class="line"><span class="bullet">-</span> Fourth item</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>First item</li><li>Second item</li><li>Third item<ul><li>Indented item</li><li>Indented item</li></ul></li><li>Fourth item</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="代码、代码块">代码、代码块</h2><p>要将单词或短语表示为代码，则在单词前后添加反引号“`”。如果需要在代码语句中使用反引号，则需要在代码前后添加两个反引号“``”。如果需要创建代码块，则需要在代码块前后添加三个反引号“```”。许多Markdown处理器都支持受围栏代码块的语法突出显示。使用此功能，您可以为编写代码的任何语言添加颜色突出显示。要添加语法突出显示，请在受防护的代码块之前的反引号旁边指定一种语言。</p><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">At the command prompt, type <span class="code">`nano`</span>.</span><br><span class="line"><span class="code">``Use `</span>code<span class="code">` in your Markdown file.`</span>`</span><br><span class="line"><span class="code">``` Java</span></span><br><span class="line"><span class="code">public class Main &#123;</span></span><br><span class="line"><span class="code">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;Hello, World!&quot;);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>At the command prompt, type <code>nano</code>.<br><code>Use `code` in your Markdown file.</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="分隔线">分隔线</h2><p>要创建分隔线，请在单独一行上使用三个或多个星号 “<code>***</code>”、破折号 “<code>---</code>” 或下划线 “<code>___</code>”，并且不能包含其他内容。</p><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"><span class="strong">***</span></span></span><br><span class="line"><span class="strong"><span class="section">---</span></span></span><br><span class="line"><span class="strong"><span class="section">__<span class="emphasis">_</span></span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>以上三个分隔线的渲染效果是一样的：</p><p><img src="https://s1.vika.cn/space/2023/07/18/9bcc7e1f1f2345b28c767b34c5c9e8e4" alt="image-20230718172717466"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="链接">链接</h2><h3 id="跳转链接">跳转链接</h3><p>链接文本放在中括号内，链接地址放在后面的括号中，链接title可选，格式为：<code>[超链接显示名](超链接地址 &quot;超链接title&quot;)</code>，对应的HTML代码为：<code>&lt;a href=&quot;超链接地址&quot; title=&quot;超链接title&quot;&gt;超链接显示名&lt;/a&gt;</code>。单独使用尖括号“<code>&lt;&gt;</code>”将链接括起来可以使链接可点击跳转。同时，也可以为链接运用其他的格式样式。</p><div class="note warning flat"><p>注意：不同的 Markdown 应用程序处理URL中间的空格方式不一样。为了兼容性，请尽量使用 <code>%20</code>代替空格。</p></div><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是一个链接：[<span class="string">百度</span>](<span class="link">https://www.baidu.com &quot;点击打开百度搜索&quot;</span>)</span><br><span class="line">这是一个链接：<span class="language-xml">&lt;https://www.baidu.com&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>这是一个链接：<a href="https://www.baidu.com" title="点击打开百度搜索">百度</a><br>这是一个链接：<a href="https://www.baidu.com">https://www.baidu.com</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="引用链接">引用链接</h3><p>引用样式链接是一种特殊的链接，它使URL在Markdown中更易于显示和阅读。引用链接分为两部分：与文本保持内联的部分（格式为：<code>[content][label]</code>）以及存储在文件中其他位置的部分（格式为：<code>[label]:url</code>），以使文本易于阅读。第一部分的两个标签之间可以添加空格，尽管这并非必须的，而第二部分的内容并不会被渲染在页面上。</p><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Markdown是一种[<span class="string">轻量级标记语言</span>][<span class="symbol">1</span>]，创始人为约翰·格鲁伯（John Gruber）。 它允许人们使用易读易写的[<span class="string">纯文本格式</span>][<span class="symbol">2</span>]编写文档，然后转换成有效的 [<span class="string">XHTML</span>][<span class="symbol">3</span>]（或者HTML）文档。这种语言吸收了很多在[<span class="string">电子邮件</span>][<span class="symbol">4</span>]中已有的纯文本标记的特性。——百度百科</span><br><span class="line"></span><br><span class="line">在页面中任意位置：</span><br><span class="line">[<span class="symbol">1</span>]:<span class="link">https://baike.baidu.com/item/轻量级标记语言</span></span><br><span class="line">[<span class="symbol">2</span>]:<span class="link">https://baike.baidu.com/item/纯文本格式</span></span><br><span class="line">[<span class="symbol">3</span>]:<span class="link">https://baike.baidu.com/item/XHTML</span></span><br><span class="line">[<span class="symbol">4</span>]:<span class="link">https://baike.baidu.com/item/电子邮件</span></span><br><span class="line">这些内容并不会渲染出来。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>Markdown是一种<a href="https://baike.baidu.com/item/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80">轻量级标记语言</a>，创始人为约翰·格鲁伯（John Gruber）。 它允许人们使用易读易写的<a href="https://baike.baidu.com/item/%E7%BA%AF%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F">纯文本格式</a>编写文档，然后转换成有效的 <a href="https://baike.baidu.com/item/XHTML">XHTML</a>（或者HTML）文档。这种语言吸收了很多在<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6">电子邮件</a>中已有的纯文本标记的特性。——百度百科</p><p>在页面中任意位置：</p><p>这些内容并不会渲染出来。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="图片">图片</h2><h3 id="显示图片">显示图片</h3><p>插入图片Markdown语法代码：<code>![图片alt](图片链接 &quot;图片title&quot;)</code>，对应的HTML代码：<code>&lt;img src=&quot;图片链接&quot; alt=&quot;图片alt&quot; title=&quot;图片title&quot;&gt;</code>。</p><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">Markdown Icon</span>](<span class="link">https://s1.vika.cn/space/2023/07/18/23f7e9d3aec747d1b180518ad8a026e7 &quot;这是Markdown的Icon&quot;</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><img src="https://s1.vika.cn/space/2023/07/18/23f7e9d3aec747d1b180518ad8a026e7" alt="Markdown Icon" title="这是Markdown的Icon"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="链接图片">链接图片</h3><p>为图片添加连接也即将图片与链接的Markdown样式结合起来。</p><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">![Markdown Icon</span>](<span class="link">https://s1.vika.cn/space/2023/07/18/23f7e9d3aec747d1b180518ad8a026e7 &quot;点击跳转到本文的链接图片部分&quot;</span>)](<span class="link">/posts/2023-07/81d4d2a5.html#链接图片</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><a href="/posts/2023-07/81d4d2a5.html#%E9%93%BE%E6%8E%A5%E5%9B%BE%E7%89%87"><img src="https://s1.vika.cn/space/2023/07/18/23f7e9d3aec747d1b180518ad8a026e7" alt="Markdown Icon" title="点击跳转到本文的链接图片部分"></a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="转义字符">转义字符</h2><h3 id="格式化字符的转义">格式化字符的转义</h3><p>要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 \ 。</p><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 如果没有转义字符，这个句子会被显示成无序列表。</span><br><span class="line"></span><br><span class="line">\* 如果没有转义字符，这个句子会被显示成无序列表。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>如果没有转义字符，这个句子会被显示成无序列表。</li></ul><p>* 如果没有转义字符，这个句子会被显示成无序列表。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>以下列出的字符都可以通过使用反斜杠字符从而达到转义目的。</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">名称</th><th style="text-align:center">字符</th><th style="text-align:center">名称</th></tr></thead><tbody><tr><td style="text-align:center">\</td><td style="text-align:center">反斜杠</td><td style="text-align:center">`</td><td style="text-align:center">反引号</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">星号</td><td style="text-align:center">_</td><td style="text-align:center">下划线</td></tr><tr><td style="text-align:center">{}</td><td style="text-align:center">大括号</td><td style="text-align:center">[]</td><td style="text-align:center">中括号</td></tr><tr><td style="text-align:center">()</td><td style="text-align:center">小括号</td><td style="text-align:center">#</td><td style="text-align:center">井号</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">加号</td><td style="text-align:center">-</td><td style="text-align:center">减号</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">句点</td><td style="text-align:center">!</td><td style="text-align:center">感叹号</td></tr><tr><td style="text-align:center">|</td><td style="text-align:center">竖线</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><div class="note warning flat"><p>注意：如果需要在表格中使用竖线符号“|”，需要替换为实体编号“<code>&amp;#124;</code>”，如果直接使用反斜杠转义（<code>\|</code>），则会显示为反斜杠“\”。</p></div><h3 id="特殊字符的转义">特殊字符的转义</h3><p>在HTML中，有一些字符需要特殊处理才能显示出来，在下方列出的是需要使用实体代码替代的字符。</p><div class="note info flat"><p>此表格内容来自：<a href="https://blog.csdn.net/u014636245/article/details/85798962">CSDN博主「hitrjj」的原创文章)</a></p></div><table><thead><tr><th style="text-align:center">显示结果</th><th style="text-align:center">描述</th><th style="text-align:center">输入</th><th style="text-align:center">实体编号</th></tr></thead><tbody><tr><td style="text-align:center"> </td><td style="text-align:center">空格</td><td style="text-align:center"><code>&amp;nbsp;</code></td><td style="text-align:center"><code>&amp;#160;</code></td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于号</td><td style="text-align:center"><code>&amp;lt;</code></td><td style="text-align:center"><code>&amp;#60;</code></td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大鱼号</td><td style="text-align:center"><code>&amp;gt;</code></td><td style="text-align:center"><code>&amp;#62;</code></td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:center">和号</td><td style="text-align:center"><code>&amp;amp;</code></td><td style="text-align:center"><code>&amp;#38;</code></td></tr><tr><td style="text-align:center">&quot;</td><td style="text-align:center">引号</td><td style="text-align:center"><code>&amp;quot;</code></td><td style="text-align:center"><code>&amp;#34;</code></td></tr><tr><td style="text-align:center">'</td><td style="text-align:center">单引号</td><td style="text-align:center"><code>&amp;apos;</code> (IE不支持)</td><td style="text-align:center"><code>&amp;#39;</code></td></tr><tr><td style="text-align:center">¢</td><td style="text-align:center">分</td><td style="text-align:center"><code>&amp;cent;</code></td><td style="text-align:center"><code>&amp;#162;</code></td></tr><tr><td style="text-align:center">£</td><td style="text-align:center">镑</td><td style="text-align:center"><code>&amp;pound;</code></td><td style="text-align:center"><code>&amp;#163;</code></td></tr><tr><td style="text-align:center">¥</td><td style="text-align:center">日元</td><td style="text-align:center"><code>&amp;yen;</code></td><td style="text-align:center"><code>&amp;#165;</code></td></tr><tr><td style="text-align:center">§</td><td style="text-align:center">节</td><td style="text-align:center"><code>&amp;sect;</code></td><td style="text-align:center"><code>&amp;#167;</code></td></tr><tr><td style="text-align:center">©</td><td style="text-align:center">版权</td><td style="text-align:center"><code>&amp;copy;</code></td><td style="text-align:center"><code>&amp;#169;</code></td></tr><tr><td style="text-align:center">®</td><td style="text-align:center">注册商标</td><td style="text-align:center"><code>&amp;reg;</code></td><td style="text-align:center"><code>&amp;#174;</code></td></tr><tr><td style="text-align:center">×</td><td style="text-align:center">乘号</td><td style="text-align:center"><code>&amp;times;</code></td><td style="text-align:center"><code>&amp;#215;</code></td></tr><tr><td style="text-align:center">÷</td><td style="text-align:center">除号</td><td style="text-align:center"><code>&amp;divide;</code></td><td style="text-align:center"><code>&amp;#247;</code></td></tr></tbody></table><div class="note warning flat"><p>注意：</p><p>尽管Markdown允许直接使用这些符号，并且在一定情况下会帮你级自动转义，但如果需要将带有特殊符号的链接放入 <code>&lt;a&gt;</code>标签的 <code>href</code>属性中，Markdown就不会自动转换，这时候就需要将链接中所有上表所示内容替换为其对应编号。例如网址：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>aaa.bbb.com/images?参数A&amp;参数B</span><br></pre></td></tr></table></figure><p>则需要修改为：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>aaa.bbb.com/images?参数A&amp;参数B</span><br></pre></td></tr></table></figure></div><h2 id="内嵌HTML标签">内嵌HTML标签</h2><h3 id="行级内联标签">行级内联标签</h3><p>HTML 的行级內联标签如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 不受限制，可以在 Markdown 的段落、列表或是标题里任意使用。依照个人习惯，甚至可以不用 Markdown 格式，而采用 HTML 标签来格式化。例如：如果比较喜欢 HTML 的 <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图片语法。</p><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This <span class="strong">**word**</span> is bold.  </span><br><span class="line">This <span class="language-xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span></span>word<span class="language-xml"><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span> is italic.</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>This <strong>word</strong> is bold.<br>This <em>word</em> is italic.</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="区块标签">区块标签</h3><p>区块元素──比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行，以便于内容区分。而且这些元素的开始与结尾标签，不可以用 tab 或是空格来缩进。Markdown 会自动识别这区块元素，避免在区块标签前后加上没有必要的 <code>&lt;p&gt;</code> 标签。</p><div class="note warning flat"><p>注意：Markdown 语法在 HTML 区块标签中将不会被进行处理。例如，你无法在 HTML 区块内使用 Markdown 形式的 <code>*强调*</code>。</p></div><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例代码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">This is a regular paragraph.</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;tr&gt;</span></span><br><span class="line"><span class="code">        &lt;td&gt;table&lt;/td&gt;</span></span><br><span class="line"><span class="code">    &lt;/tr&gt;</span></span><br><span class="line"><span class="code">    *强调*</span></span><br><span class="line"><span class="code">&lt;/table&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">This is another regular paragraph.</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>This is a regular paragraph.</p><table>    <tr>        <td>table</td>    </tr>    *强调*</table><p>This is another regular paragraph.</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">Markdown系列文章的第二篇，主要内容是Markdown的基本语法，学会这些就算是入门啦。</summary>
    
    
    
    <category term="Markdown" scheme="https://www.iuoyt.com/categories/Markdown/"/>
    
    
    <category term="Markdown" scheme="https://www.iuoyt.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Markdown是什么</title>
    <link href="https://www.iuoyt.com/posts/8b048021.html"/>
    <id>https://www.iuoyt.com/posts/8b048021.html</id>
    <published>2023-07-18T06:27:48.000Z</published>
    <updated>2023-09-09T12:15:09.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Markdown的起源">Markdown的起源</h2><p>Markdown起源于2004年，其设计灵感主要来源于纯文本电子邮件的格式，目标是能让人们能够使用易读、易写的纯文本格式编写文档，并且可以被转化为HTML（超文本标记语言）文档，也可以说Markdown是HTML的简化版，它只提供了最常用的语法格式，并且较为简单，让使用者无需再关注复杂的HTML标签，从而专注于写作。当遇到无法用Markdown特殊标记实现完成的特殊需求时，也可以使用HTML来实现。</p><p><img src="https://s1.vika.cn/space/2023/07/18/23f7e9d3aec747d1b180518ad8a026e7" alt="Markdown208x128"></p><h2 id="Markdown可以在哪里使用">Markdown可以在哪里使用</h2><p>Markdown 无处不在。StackOverflow、CSDN、掘金、简书、GitBook、有道云笔记、V2EX、光谷社区等。主流的代码托管平台，如 GitHub、GitLab、BitBucket、Coding、Gitee 等等，都支持 Markdown 语法，很多开源项目的 README、开发文档、帮助文档、Wiki 等都用 Markdown 写作。</p><ol><li><p>排版网页内容</p><p>Markdown 可以用于撰写网页内容，如博客文章、网页文档等。它的简洁语法使得文本易于阅读和编辑，同时转换为 HTML 后，可以很好地呈现在网页上。</p></li><li><p>文档撰写</p><p>对于技术文档、项目文档、说明书、报告等内容，Markdown可以简易地将内容漂亮地展现出来，比如代码段的呈现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>电子邮件</p><p>一些电子邮件平台为用户提供了Markdown格式的撰写方式，用户可以直接在网页或者客户端中简易的写出一篇美观易读的电子邮件。</p></li><li><p>数学文档</p><p>Markdown还支持$\LaTeX$格式的书写，因此使用者可以将数学公式和符号展示在文档中。比如，复杂数的二次方程通解公式为：</p><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">渲染演示</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>$ x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a} $</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span> x = <span class="keyword">\frac</span>&#123;-b <span class="keyword">\pm</span> <span class="keyword">\sqrt</span>&#123;b<span class="built_in">^</span>2 - 4ac&#125;&#125;&#123;2a&#125; <span class="built_in">$</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li></ol><h2 id="Markdown文档的保存">Markdown文档的保存</h2><p>Markdown文件通常是以.md的格式保存，而因为Markdown是独立于平台的，使用者可以在运行任何操作系统的任何设备上创建 Markdown 格式的文本，具有很好的通用性，因此无论你使用哪一款Markdown编辑器，甚至是记事本，写出的文档都可以顺利地被其他阅读者打开并查看。同时Markdown还可以导出为PDF、Word、EPUB等多种格式的文档。</p>]]></content>
    
    
    <summary type="html">Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</summary>
    
    
    
    <category term="Markdown" scheme="https://www.iuoyt.com/categories/Markdown/"/>
    
    
    <category term="Markdown" scheme="https://www.iuoyt.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Front-matter的写法</title>
    <link href="https://www.iuoyt.com/posts/7effe138.html"/>
    <id>https://www.iuoyt.com/posts/7effe138.html</id>
    <published>2023-07-18T04:25:09.000Z</published>
    <updated>2023-09-09T12:15:09.784Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p>本文参考：<a href="https://butterfly.js.org/posts/dc584b87/#Front-matter">Butterfly 安裝文檔(二) 主題頁面 | Butterfly</a></p></div><h2 id="Page-Front-matter">Page Front-matter</h2><p>Page Front-matter用于页面的设置</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aside:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line"><span class="section">random:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>写法</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td>title</td><td style="text-align:left"><strong>【必需】页面标题</strong></td></tr><tr><td>date</td><td style="text-align:left"><strong>【必需】页面创建日期</strong></td></tr><tr><td>type</td><td style="text-align:left"><strong>【必需】标签、分类和友情链接三个页面需要配置</strong></td></tr><tr><td>updated</td><td style="text-align:left">【可选】页面更新日期</td></tr><tr><td>description</td><td style="text-align:left">【可选】页面描述</td></tr><tr><td>keywords</td><td style="text-align:left">【可选】页面关键词</td></tr><tr><td>comments</td><td style="text-align:left">【可选】显示页面评论模块 (默认 true)</td></tr><tr><td>top_img</td><td style="text-align:left">【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td style="text-align:left">【可选】显示mathjax (当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td style="text-align:left">【可选】显示katex (当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td style="text-align:left">【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td style="text-align:left">【可选】在需要的页面加载aplayer的js和css</td></tr><tr><td>highlight_shrink</td><td style="text-align:left">【可选】配置代码框是否展开 (true/false) (默认为设置中highlight_shrink的配置)</td></tr><tr><td>random</td><td style="text-align:left">【可选】配置友情链接是否随机排序（默认为 false)</td></tr></tbody></table><h2 id="Post-Front-matter">Post Front-matter</h2><p>Post Front-matter用于文章页的设置</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">comments:</span></span><br><span class="line"><span class="emphasis">cover:</span></span><br><span class="line"><span class="emphasis">toc:</span></span><br><span class="line"><span class="emphasis">toc_</span>number:</span><br><span class="line">toc<span class="emphasis">_style_</span>simple:</span><br><span class="line">copyright:</span><br><span class="line">copyright<span class="emphasis">_author:</span></span><br><span class="line"><span class="emphasis">copyright_</span>author<span class="emphasis">_href:</span></span><br><span class="line"><span class="emphasis">copyright_</span>url:</span><br><span class="line">copyright<span class="emphasis">_info:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line">aside:</span><br><span class="line"><span class="section">abcjs:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td><strong>【必需】文章标题</strong></td></tr><tr><td>date</td><td><strong>【必需】文章创建日期</strong></td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标签</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章顶部缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>toc_style_simple</td><td>【可选】显示 toc 简洁模式</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copuright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置 mathjax 的 per_page: false 时，才需要配置，默认 false )</td></tr><tr><td>katex</td><td>【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false )</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载 aplayer 的 js 和 css</td></tr><tr><td>hightlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中 highlight_shrink 的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>abcjs</td><td>【可选】加载 abcjs (当设置 abcjs 的 per_page: false 时，才需要配置，默认 false )</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">Front-matter是markdown文件最上方以&quot;---&quot;分隔的区域，用于指定个别档案的变数。</summary>
    
    
    
    <category term="Hexo" scheme="https://www.iuoyt.com/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://www.iuoyt.com/tags/Hexo/"/>
    
    <category term="Butterfly" scheme="https://www.iuoyt.com/tags/Butterfly/"/>
    
  </entry>
  
</feed>
